import stripe
from flask import Flask, request, jsonify

app = Flask(__name__)

# Set up Stripe with your secret key
stripe.api_key = "your_secret_key_here"

@app.route('/pay', methods=['POST'])
def process_payment():
    data = request.json
    amount = int(data.get("amount")) * 100  # Convert dollars to cents
    card_token = data.get("token")  # Token generated by Stripe.js

    try:
        charge = stripe.Charge.create(
            amount=amount,
            currency="usd",
            source=card_token,
            description="Payment Transaction"
        )
        return jsonify({"message": "Payment successful!"}), 200
    except stripe.error.CardError as e:
        return jsonify({"message": str(e)}), 400

if __name__ == "__main__":
    app.run(debug=True)









@app.route('/refund', methods=['POST'])
def process_refund():
    data = request.json
    charge_id = data.get("charge_id")  # Get the transaction ID

    try:
        refund = stripe.Refund.create(charge=charge_id)
        return jsonify({"message": "Refund successful!"}), 200
    except stripe.error.StripeError as e:
        return jsonify({"message": str(e)}), 400















@app.route('/pay', methods=['POST'])
def process_payment():
    data = request.json
    amount = int(data.get("amount")) * 100  # Convert dollars to cents
    currency = data.get("currency")  # User-selected currency
    card_token = data.get("token")

    try:
        charge = stripe.Charge.create(
            amount=amount,
            currency=currency,  # Accepting different currencies
            source=card_token,
            description="Multi-currency Payment"
        )
        return jsonify({"message": "Payment successful!", "currency": currency}), 200
    except stripe.error.StripeError as e:
        return jsonify({"message": str(e)}), 400












charge = stripe.Charge.create(
    amount=amount,
    currency="usd",
    source=card_token,
    description="Secure Payment",
    metadata={"3d_secure": "required"}  # Requires extra authentication
)












@app.route('/analytics', methods=['GET'])
def get_payment_data():
    payments = stripe.Charge.list(limit=10)  # Get recent payments
    return jsonify(payments)















@app.route('/invoice', methods=['POST'])
def create_invoice():
    data = request.json
    customer_email = data.get("email")
    amount = int(data.get("amount")) * 100

    try:
        invoice = stripe.Invoice.create(
            customer_email=customer_email,
            auto_advance=True,
            collection_method="send_invoice",
            amount_due=amount,
            currency="usd",
            description="Purchase Invoice"
        )
        return jsonify({"message": "Invoice sent successfully!"}), 200
    except stripe.error.StripeError as e:
        return jsonify({"message": str(e)}), 400






loyalty_points = {}

@app.route('/loyalty', methods=['POST'])
def update_loyalty():
    data = request.json
    user_id = data.get("user_id")
    amount = data.get("amount")

    points_earned = amount // 10  # 1 point per $10 spent
    loyalty_points[user_id] = loyalty_points.get(user_id, 0) + points_earned

    return jsonify({"message": f"You earned {points_earned} points!", "total_points": loyalty_points[user_id]})















from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import NearestNeighbors

# Sample transaction data
transactions = ["gaming laptop", "wireless mouse", "mechanical keyboard", "noise-canceling headphones"]

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(transactions)
model = NearestNeighbors(n_neighbors=1).fit(X)

def recommend_product(transaction):
    query = vectorizer.transform([transaction])
    nearest = model.kneighbors(query, return_distance=False)
    return transactions[nearest[0][0]]

@app.route('/recommend', methods=['POST'])
def get_recommendation():
    data = request.json
    transaction = data.get("item")
    recommendation = recommend_product(transaction)
    return jsonify({"message": f"Customers who bought '{transaction}' also liked '{recommendation}'."})






















import requests

PAYPAL_CLIENT_ID = "your_client_id_here"
PAYPAL_SECRET = "your_secret_key_here"

def create_paypal_payment(amount):
    url = "https://api-m.paypal.com/v1/payments/payment"
    headers = {"Content-Type": "application/json"}
    data = {
        "intent": "sale",
        "payer": {"payment_method": "paypal"},
        "transactions": [{"amount": {"total": amount, "currency": "USD"}}],
        "redirect_urls": {"return_url": "https://your-site.com/success", "cancel_url": "https://your-site.com/cancel"}
    }
    response = requests.post(url, json=data, headers=headers, auth=(PAYPAL_CLIENT_ID, PAYPAL_SECRET))
    return response.json()
















import openai

openai.api_key = "your_openai_api_key_here"

@app.route('/chatbot', methods=['POST'])
def chatbot_response():
    data = request.json
    user_message = data.get("message")

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": user_message}]
    )
    return jsonify({"message": response['choices'][0]['message']['content']})









charge = stripe.Charge.create(
    amount=5000,
    currency="usd",
    source=card_token,
    description="Purchase with tax",
    automatic_tax={"enabled": True}
)














TAX_RATES = {"CA": 0.075, "NY": 0.088, "TX": 0.062}

def calculate_tax(state, amount):
    tax_rate = TAX_RATES.get(state, 0.05)  # Default tax rate
    return amount * tax_rate













@app.route('/save-card', methods=['POST'])
def save_card():
    data = request.json
    customer_id = data.get("customer_id")
    card_token = data.get("token")

    try:
        card = stripe.Customer.create_source(
            customer_id,
            source=card_token
        )
        return jsonify({"message": "Card saved successfully!"}), 200
    except stripe.error.StripeError as e:
        return jsonify({"message": str(e)}), 400















charge = stripe.Charge.create(
    amount=amount,
    currency="usd",
    source=card_token,
    description="Secure Payment",
    metadata={"3d_secure": "required"}
)












if amount > 5000:  # Block transactions over $5000
    return jsonify({"message": "Transaction flagged for review."}), 403







DISCOUNTS = {"WELCOME10": 0.10, "SUMMER20": 0.20}  # Promo codes with discount percentages

@app.route('/apply-discount', methods=['POST'])
def apply_discount():
    data = request.json
    amount = float(data.get("amount"))
    promo_code = data.get("promo_code", "").upper()

    discount = DISCOUNTS.get(promo_code, 0)
    final_amount = amount * (1 - discount)

    return jsonify({"original_price": amount, "discount": discount, "final_price": final_amount})








@app.route('/auto-discount', methods=['POST'])
def auto_discount():
    data = request.json
    user_id = data.get("user_id")
    amount = float(data.get("amount"))

    # Example: If a user has spent over $1000, give them 15% off
    if user_id in purchase_history and purchase_history[user_id] > 1000:
        discount = 0.15
    else:
        discount = 0
    
    final_amount = amount * (1 - discount)
    return jsonify({"discount_applied": discount, "final_price": final_amount})













HOLIDAY_DISCOUNTS = {"Black Friday": 0.30, "Christmas": 0.25, "Cyber Monday": 0.20}

@app.route('/holiday-discount', methods=['POST'])
def holiday_discount():
    data = request.json
    amount = float(data.get("amount"))
    holiday = data.get("holiday", "").title()

    discount = HOLIDAY_DISCOUNTS.get(holiday, 0)
    final_amount = amount * (1 - discount)

    return jsonify({"holiday": holiday, "discount": discount, "final_price": final_amount})













user_referrals = {}

@app.route('/refer', methods=['POST'])
def apply_referral():
    data = request.json
    user_id = data.get("user_id")
    
    user_referrals[user_id] = user_referrals.get(user_id, 0) + 1

    if user_referrals[user_id] == 1:
        discount = 0.10  # 10% off first referral
    elif user_referrals[user_id] >= 5:
        discount = 20  # Flat $20 reward
    else:
        discount = 0

    return jsonify({"referrals": user_referrals[user_id], "discount_applied": discount})
















VIP_TIERS = {"Silver": 0.10, "Gold": 0.20, "Platinum": 0.30}

@app.route('/vip-discount', methods=['POST'])
def vip_discount():
    data = request.json
    amount = float(data.get("amount"))
    tier = data.get("tier", "").title()

    discount = VIP_TIERS.get(tier, 0)
    final_amount = amount * (1 - discount)

    return jsonify({"tier": tier, "discount": discount, "final_price": final_amount})












BULK_DISCOUNTS = {5: 0.10, 10: 0.20, 20: 0.30}  # Discount percentages based on quantity purchased

@app.route('/bulk-discount', methods=['POST'])
def bulk_discount():
    data = request.json
    quantity = int(data.get("quantity"))
    amount = float(data.get("amount"))

    discount = max([BULK_DISCOUNTS[q] for q in BULK_DISCOUNTS if quantity >= q], default=0)
    final_amount = amount * (1 - discount)

    return jsonify({"quantity": quantity, "discount": discount, "final_price": final_amount})













EARLY_ACCESS_DISCOUNT = 0.15  # 15% discount for early orders

@app.route('/early-access', methods=['POST'])
def early_access():
    data = request.json
    amount = float(data.get("amount"))

    final_amount = amount * (1 - EARLY_ACCESS_DISCOUNT)

    return jsonify({"early_access": True, "discount": EARLY_ACCESS_DISCOUNT, "final_price": final_amount})

















user_points = {}

@app.route('/earn-points', methods=['POST'])
def earn_points():
    data = request.json
    user_id = data.get("user_id")
    amount = float(data.get("amount"))

    points_earned = int(amount // 10)  # 1 point per $10 spent
    user_points[user_id] = user_points.get(user_id, 0) + points_earned

    return jsonify({"message": f"You earned {points_earned} points!", "total_points": user_points[user_id]})













import random

@app.route('/mystery-discount', methods=['POST'])
def mystery_discount():
    data = request.json
    amount = float(data.get("amount"))

    discount = random.choice([0.05, 0.10, 0.20])  # Random 5%, 10%, or 20% off
    final_amount = amount * (1 - discount)

    return jsonify({"discount_awarded": discount, "final_price": final_amount})












user_spending = {}

@app.route('/track-spending', methods=['POST'])
def track_spending():
    data = request.json
    user_id = data.get("user_id")
    amount = float(data.get("amount"))

    user_spending[user_id] = user_spending.get(user_id, 0) + amount

    leaderboard = sorted(user_spending.items(), key=lambda x: x[1], reverse=True)[:5]  # Top 5 users
    return jsonify({"leaderboard": leaderboard})












MEMBERSHIP_TIERS = {
    "Bronze": 100,
    "Silver": 500,
    "Gold": 1000,
    "Platinum": 5000
}

@app.route('/membership-tier', methods=['POST'])
def get_membership():
    data = request.json
    user_id = data.get("user_id")
    total_spent = user_spending.get(user_id, 0)

    tier = next((t for t, threshold in MEMBERSHIP_TIERS.items() if total_spent >= threshold), "Basic")
    
    return jsonify({"user_id": user_id, "tier": tier})













import time

FLASH_SALE_ACTIVE = True
FLASH_SALE_DISCOUNT = 0.25  # 25% off during flash sale
FLASH_SALE_END_TIME = time.time() + 3600  # Flash sale lasts 1 hour

@app.route('/flash-sale', methods=['GET'])
def check_flash_sale():
    global FLASH_SALE_ACTIVE
    if time.time() > FLASH_SALE_END_TIME:
        FLASH_SALE_ACTIVE = False  # Sale ends

    return jsonify({"flash_sale": FLASH_SALE_ACTIVE, "discount": FLASH_SALE_DISCOUNT if FLASH_SALE_ACTIVE else 0})














BUNDLE_DEALS = {
    ("Laptop", "Mouse", "Keyboard"): 0.15,  # 15% off when buying all three
    ("Phone", "Case", "Screen Protector"): 0.10
}

@app.route('/bundle-deal', methods=['POST'])
def bundle_deal():
    data = request.json
    items = tuple(sorted(data.get("items")))  # Sort items to match bundle keys
    amount = float(data.get("amount"))

    discount = BUNDLE_DEALS.get(items, 0)
    final_amount = amount * (1 - discount)

    return jsonify({"bundle": items, "discount": discount, "final_price": final_amount})

















MATCH_PERCENTAGE = 0.50  # Platform matches 50% of donations

@app.route('/donate', methods=['POST'])
def match_donation():
    data = request.json
    amount = float(data.get("amount"))

    match_amount = amount * MATCH_PERCENTAGE
    total_donation = amount + match_amount

    return jsonify({"user_donation": amount, "matched_amount": match_amount, "total_donation": total_donation})




















import psycopg2

conn = psycopg2.connect(
    dbname="paymentsystem",
    user="your_username",
    password="your_password",
    host="localhost"
)
cursor = conn.cursor()

@app.route('/store-payment', methods=['POST'])
def store_payment():
    data = request.json
    user_id = data.get("user_id")
    amount = data.get("amount")
    payment_method = data.get("payment_method")

    cursor.execute("INSERT INTO transactions (user_id, amount, payment_method, status) VALUES (%s, %s, %s, %s)",
                   (user_id, amount, payment_method, "Completed"))
    conn.commit()

    return jsonify({"message": "Transaction stored successfully!"})











from flask import Flask, redirect, url_for, session
from flask_oauthlib.client import OAuth

app = Flask(__name__)
app.secret_key = "random_secret_key"
oauth = OAuth(app)

google = oauth.remote_app(
    'google',
    consumer_key='your_client_id',
    consumer_secret='your_client_secret',
    request_token_params={'scope': 'email'},
    base_url='https://www.googleapis.com/oauth2/v1/',
    request_token_url=None,
    access_token_method='POST',
    access_token_url='https://accounts.google.com/o/oauth2/token',
    authorize_url='https://accounts.google.com/o/oauth2/auth'
)

@app.route('/login')
def login():
    return google.authorize(callback=url_for('authorized', _external=True))

@app.route('/logout')
def logout():
    session.pop('google_token', None)
    return redirect(url_for('index'))

@app.route('/authorized')
def authorized():
    response = google.authorized_response()
    session['google_token'] = (response['access_token'], '')
    user_info = google.get('userinfo')
    return f"Welcome {user_info.data['email']}!"




















from cryptography.fernet import Fernet

key = Fernet.generate_key()
cipher = Fernet(key)

@app.route('/encrypt-payment', methods=['POST'])
def encrypt_payment():
    data = request.json
    card_number = data.get("card_number")

    encrypted_card = cipher.encrypt(card_number.encode())
    return jsonify({"encrypted_data": encrypted_card.decode()})



















import stripe

stripe.api_key = "your_secret_key_here"

@app.route('/refund', methods=['POST'])
def process_refund():
    data = request.json
    charge_id = data.get("charge_id")  # Get the transaction ID

    try:
        refund = stripe.Refund.create(charge=charge_id)
        return jsonify({"message": "Refund successful!"}), 200
    except stripe.error.StripeError as e:
        return jsonify({"message": str(e)}), 400














import datetime

TRANSACTIONS = {}  # Store transactions with timestamps

@app.route('/refund-policy', methods=['POST'])
def refund_policy():
    data = request.json
    charge_id = data.get("charge_id")
    transaction_time = TRANSACTIONS.get(charge_id)

    if transaction_time and (datetime.datetime.now() - transaction_time).days > 30:
        return jsonify({"message": "Refund period expired!"}), 403

    return process_refund()








@app.route('/notify-refund', methods=['POST'])
def notify_user():
    data = request.json
    user_email = data.get("email")
    
    # Simulate sending email
    return jsonify({"message": f"Refund confirmation sent to {user_email}!"})











@app.route('/analytics', methods=['GET'])
def get_payment_data():
    payments = stripe.Charge.list(limit=10)  # Get recent transactions
    return jsonify(payments)
































@app.route('/invoice', methods=['POST'])
def create_invoice():
    data = request.json
    customer_email = data.get("email")
    amount = int(data.get("amount")) * 100

    try:
        invoice = stripe.Invoice.create(
            auto_advance=True,
            collection_method="send_invoice",
            amount_due=amount,
            currency="usd",
            description="Purchase Invoice",
            customer_email=customer_email
        )
        return jsonify({"message": "Invoice sent successfully!"}), 200
    except stripe.error.StripeError as e:
        return jsonify({"message": str(e)}), 400














@app.route('/monthly-sales', methods=['GET'])
def get_monthly_sales():
    charges = stripe.Charge.list(limit=100)
    
    total_revenue = sum(charge["amount"] for charge in charges["data"]) / 100  # Convert cents to dollars
    return jsonify({"total_monthly_revenue": total_revenue})
















loyalty_points = {}

@app.route('/loyalty', methods=['POST'])
def update_loyalty():
    data = request.json
    user_id = data.get("user_id")
    amount = float(data.get("amount"))

    points_earned = int(amount // 10)  # 1 point per $10 spent
    loyalty_points[user_id] = loyalty_points.get(user_id, 0) + points_earned

    return jsonify({"message": f"You earned {points_earned} points!", "total_points": loyalty_points[user_id]})














VIP_TIERS = {"Bronze": 0.05, "Silver": 0.10, "Gold": 0.20, "Platinum": 0.30}
user_spending = {}

@app.route('/vip-pricing', methods=['POST'])
def vip_pricing():
    data = request.json
    user_id = data.get("user_id")
    amount = float(data.get("amount"))

    total_spent = user_spending.get(user_id, 0)
    tier = next((t for t, threshold in VIP_TIERS.items() if total_spent >= threshold * 10000), "Basic")
    discount = VIP_TIERS.get(tier, 0)

    final_amount = amount * (1 - discount)
    return jsonify({"tier": tier, "discount": discount, "final_price": final_amount})

















@app.route('/fraud-alert', methods=['POST'])
def fraud_alert():
    data = request.json
    user_id = data.get("user_id")
    amount = float(data.get("amount"))

    if amount > 5000:  # Flag transactions above $5000
        return jsonify({"message": "Transaction flagged for review!"}), 403

    return jsonify({"message": "Transaction approved!"})












from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import NearestNeighbors

# Sample transaction history
transactions = ["gaming laptop", "wireless mouse", "mechanical keyboard", "noise-canceling headphones"]

vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(transactions)
model = NearestNeighbors(n_neighbors=1).fit(X)

def recommend_product(transaction):
    query = vectorizer.transform([transaction])
    nearest = model.kneighbors(query, return_distance=False)
    return transactions[nearest[0][0]]

@app.route('/recommend', methods=['POST'])
def get_recommendation():
    data = request.json
    transaction = data.get("item")
    recommendation = recommend_product(transaction)
    return jsonify({"message": f"Customers who bought '{transaction}' also liked '{recommendation}'."})










USER_ACTIVITY = {}

@app.route('/personalized-discount', methods=['POST'])
def personalized_discount():
    data = request.json
    user_id = data.get("user_id")

    # Reward frequent shoppers
    if USER_ACTIVITY.get(user_id, 0) > 5:
        discount = 0.15  # 15% off
    else:
        discount = 0.05  # Standard 5% off

    return jsonify({"discount": discount})









@app.route('/subscribe', methods=['POST'])
def create_subscription():
    data = request.json
    user_id = data.get("user_id")
    plan = data.get("plan")  # "monthly", "yearly"

    stripe.Subscription.create(
        customer=user_id,
        items=[{"plan": plan}]
    )

    return jsonify({"message": f"Subscribed to {plan} plan!"})







